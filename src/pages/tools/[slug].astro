---
import { Code } from '@components/Code';
import { Flow } from '@components/Flow';
import { VisuallyHidden } from '@components/VisuallyHidden';
import {
	TELEMETRY_DISCLOSURE_LABELS,
	TELEMETRY_INFORMATION_TYPE_LABELS,
	TELEMETRY_SCOPE_LABELS,
	TELEMETRY_TYPE_LABELS,
} from '@domain/telemetry';
import { getToolNpmDownloadCount, getToolSlug, Tool } from '@domain/tool';
import { TOOLS } from '@features/Tools/tools';
import { getHostname } from '@functions/url';
import ContentLayout from '@layouts/ContentLayout.astro';

export function getStaticPaths() {
	return TOOLS.filter((t) => t.telemetry.type === 'OPT_OUT').map((tool) => ({
		params: {
			slug: getToolSlug(tool),
		},
		props: tool,
	}));
}

const { name, website, npm, telemetry } = Astro.props as Tool;

const downloadCount = await getToolNpmDownloadCount(Astro.props as Tool);

const numberFormatter = new Intl.NumberFormat('en');
const listFormatter = new Intl.ListFormat('en', {
	type: 'conjunction',
	style: 'long',
});

const PAGE_TITLE = `Telemetry in ${name}`;
---

<ContentLayout title={PAGE_TITLE}>
	<Flow slot="start">
		<h1>
			<VisuallyHidden>Telemetry in</VisuallyHidden>
			{name}
		</h1>

		<Flow element="dl">
			<div>
				<dt>Website</dt>
				<dd><a href={website} target="_blank">{getHostname(website)}</a></dd>
			</div>

			{
				npm && (
					<div>
						<dt>Downloads</dt>
						<dd>{numberFormatter.format(downloadCount)}</dd>
					</div>
				)
			}

			<div>
				<dt>Telemetry</dt>
				<dd>{TELEMETRY_TYPE_LABELS[telemetry.type]}</dd>
			</div>

			{
				telemetry.type === 'OPT_OUT' && (
					<>
						<div>
							<dt>Disclosure</dt>
							<dd>{TELEMETRY_DISCLOSURE_LABELS[telemetry.disclosure]}</dd>
						</div>

						<div>
							<dt>Data collected</dt>
							<dd>
								{listFormatter.format(
									telemetry.informationType.map((it) =>
										TELEMETRY_INFORMATION_TYPE_LABELS[it].toLowerCase()
									)
								)}
							</dd>
						</div>

						<div>
							<dt>Scopes</dt>
							<dd>
								{listFormatter.format(
									telemetry.scopes.map((scope) => TELEMETRY_SCOPE_LABELS[scope])
								)}
							</dd>
						</div>

						<div>
							<dt>More info</dt>
							<dd>
								<a href={telemetry.resource}>{getHostname(telemetry.resource)}</a>
							</dd>
						</div>
					</>
				)
			}
		</Flow>
	</Flow>

	<div>
		<Flow>
			{
				telemetry.type === 'OPT_OUT' && (
					<>
						<h2>
							How to opt out <VisuallyHidden>of {name}</VisuallyHidden>
						</h2>
						{telemetry.optOutOptions.map((option) => {
							switch (option.type) {
								case 'COMMAND':
									return (
										<Flow>
											<p>Run this command:</p>
											{/* prettier-ignore */}
											<pre><code>{option.value}</code></pre>
										</Flow>
									);
								case 'ENVIRONMENT_VARIABLE':
									return (
										<Flow>
											<p>Add this to your environment variable to permanently disable telemetry:</p>
											<Code>{option.value}</Code>
										</Flow>
									);
							}
						})}
					</>
				)
			}
		</Flow>
	</div>
</ContentLayout>
