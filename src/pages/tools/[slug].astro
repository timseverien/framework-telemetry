---
import { Code } from '@components/Code';
import { Code as CodeAstro } from 'astro/components';
import { Flow } from '@components/Flow';
import { ListWithFallback } from '@components/ListWithFallback';
import { ScoreOverview } from '@components/ScoreOverview';
import { VisuallyHidden } from '@components/VisuallyHidden';
import {
	TELEMETRY_DISCLOSURE_LABELS,
	TELEMETRY_INFORMATION_TYPE_LABELS,
	TELEMETRY_RESOURCE_TYPE_LABELS,
	TELEMETRY_SCOPE_LABELS,
	TELEMETRY_TYPE_LABELS,
} from '@domain/telemetry';
import { getToolNpmDownloadCount, getToolSlug, Tool } from '@domain/tool';
import { getResourcesSorted, TOOLS } from '@features/Tools/tools';
import { getHostname } from '@functions/url';
import ContentLayout from '@layouts/ContentLayout.astro';

export function getStaticPaths() {
	return TOOLS.filter((t) => t.telemetry.type !== 'NONE').map((tool) => ({
		params: {
			slug: getToolSlug(tool),
		},
		props: tool,
	}));
}

const { name, website, npm, telemetry } = Astro.props as Tool;

const numberFormatter = new Intl.NumberFormat('en');
const downloadCount = await getToolNpmDownloadCount(Astro.props as Tool);

const PAGE_TITLE = `Telemetry in ${name}`;

if (telemetry.type === 'NONE') {
	throw new Error('NOPE');
}
---

<ContentLayout title={PAGE_TITLE}>
	<Flow slot="start">
		<h1>
			<VisuallyHidden>Telemetry in</VisuallyHidden>
			{name}
		</h1>

		<Flow element="dl">
			<div>
				<dt>Website</dt>
				<dd><a href={website} target="_blank">{getHostname(website)}</a></dd>
			</div>

			{
				npm && (
					<div>
						<dt>Downloads</dt>
						<dd>{numberFormatter.format(downloadCount)}</dd>
					</div>
				)
			}

			<div>
				<dt>Is consent required?</dt>
				<dd>
					{telemetry.type === 'OPT_IN' ? 'Yes' : 'No'} ({
						TELEMETRY_TYPE_LABELS[telemetry.type].toLowerCase()
					})
				</dd>
			</div>

			<div>
				<dt>At what point is the data collection disclosed?</dt>
				<dd>{TELEMETRY_DISCLOSURE_LABELS[telemetry.disclosure]}</dd>
			</div>

			<div>
				<dt>Data collected</dt>
				<dd>
					<ListWithFallback
						list={telemetry.informationType.map((it) =>
							TELEMETRY_INFORMATION_TYPE_LABELS[it].toLowerCase()
						)}
						fallback="Unknown"
					/>
				</dd>
			</div>

			<div>
				<dt>Scopes</dt>
				<dd>
					<ListWithFallback
						list={telemetry.scopes.map((scope) => TELEMETRY_SCOPE_LABELS[scope])}
						fallback="Unknown"
					/>
				</dd>
			</div>

			{
				telemetry.resources.length > 0 && (
					<div>
						<dt>Links</dt>
						<dd>
							<ul>
								{getResourcesSorted(telemetry.resources).map((resource) => (
									<li>
										{TELEMETRY_RESOURCE_TYPE_LABELS[resource.type]}:
										<a href={resource.url} target="_blank">
											{getHostname(resource.url)}
										</a>
									</li>
								))}
							</ul>
						</dd>
					</div>
				)
			}
		</Flow>
	</Flow>

	<div>
		<Flow>
			<ScoreOverview telemetry={telemetry} />

			<h2>
				How to opt out <VisuallyHidden>of {name}</VisuallyHidden>
			</h2>

			{
				telemetry.optOutOptions.map((option, index) => {
					const optionNumber = 1 + index;

					switch (option.type) {
						case 'COMMAND':
							return (
								<>
									<h3>{optionNumber}. Run command</h3>
									<p>
										This typically disables telemetry for one instance. Note that if the tool is
										installed globally, it applies to the device. However, if the tool is installed
										per project, you’ll have to do this for each project.
									</p>
									{/* prettier-ignore */}
									<Code>{option.value}</Code>
								</>
							);
						case 'ENVIRONMENT_VARIABLE':
							return (
								<>
									<h3>{optionNumber}. Add environment variable</h3>
									<p>
										This disabled telemetry for the device you’ve set the environment variable on.
									</p>
									<p>
										Note that if this tool is used elsewhere, like a during Continuous Integration,
										you’ll have to add these environment variables there, too.
									</p>

									<Code>{option.value}</Code>
								</>
							);
						case 'SETTING':
							return (
								<>
									<h3>{optionNumber}. Add setting</h3>
									<p>
										This approach typically disables telemetry for all instances that share the
										configuration file.
									</p>
									<Code>{option.value}</Code>
								</>
							);
					}
				})
			}
		</Flow>
	</div>
</ContentLayout>
