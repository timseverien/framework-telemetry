---
import { Code } from '@components/Code';
import { Flow } from '@components/Flow';
import { Score } from '@components/Score';
import { ScoreOverview } from '@components/ScoreOverview';
import { VisuallyHidden } from '@components/VisuallyHidden';
import {
	TELEMETRY_DISCLOSURE_LABELS,
	TELEMETRY_INFORMATION_TYPE_LABELS,
	TELEMETRY_RESOURCE_TYPE_LABELS,
	TELEMETRY_SCOPE_LABELS,
	TELEMETRY_TYPE_LABELS,
} from '@domain/telemetry';
import { getToolNpmDownloadCount, getToolSlug, Tool } from '@domain/tool';
import { getResourcesSorted, TOOLS } from '@features/Tools/tools';
import { getHostname } from '@functions/url';
import ContentLayout from '@layouts/ContentLayout.astro';

export function getStaticPaths() {
	return TOOLS.filter((t) => t.telemetry.type !== 'NONE').map((tool) => ({
		params: {
			slug: getToolSlug(tool),
		},
		props: tool,
	}));
}

const { name, website, npm, telemetry } = Astro.props as Tool;

const downloadCount = await getToolNpmDownloadCount(Astro.props as Tool);

const numberFormatter = new Intl.NumberFormat('en');
const listFormatter = new Intl.ListFormat('en', {
	type: 'conjunction',
	style: 'long',
});

const PAGE_TITLE = `Telemetry in ${name}`;

if (telemetry.type === 'NONE') {
	throw new Error('NOPE');
}

const dataCollected = listFormatter.format(
	telemetry.informationType.map((it) => TELEMETRY_INFORMATION_TYPE_LABELS[it].toLowerCase())
);
---

<ContentLayout title={PAGE_TITLE}>
	<Flow slot="start">
		<h1>
			<VisuallyHidden>Telemetry in</VisuallyHidden>
			{name}
		</h1>

		<Flow element="dl">
			<div>
				<dt>Website</dt>
				<dd><a href={website} target="_blank">{getHostname(website)}</a></dd>
			</div>

			{
				npm && (
					<div>
						<dt>Downloads</dt>
						<dd>{numberFormatter.format(downloadCount)}</dd>
					</div>
				)
			}

			<div>
				<dt>Is consent required?</dt>
				<dd>
					{telemetry.type === 'OPT_IN' ? 'Yes' : 'No'} ({
						TELEMETRY_TYPE_LABELS[telemetry.type].toLowerCase()
					})
				</dd>
			</div>

			<div>
				<dt>At what point is the data collection disclosed?</dt>
				<dd>{TELEMETRY_DISCLOSURE_LABELS[telemetry.disclosure]}</dd>
			</div>

			<div>
				<dt>Data collected</dt>
				<dd>
					{dataCollected.substring(0, 1).toLocaleLowerCase() + dataCollected.substring(1)}
				</dd>
			</div>

			<div>
				<dt>Scopes</dt>
				<dd>
					{listFormatter.format(telemetry.scopes.map((scope) => TELEMETRY_SCOPE_LABELS[scope]))}
				</dd>
			</div>

			{
				telemetry.resources.length > 0 && (
					<div>
						<dt>Links</dt>
						<dd>
							<ul>
								{getResourcesSorted(telemetry.resources).map((resource) => (
									<li>
										{TELEMETRY_RESOURCE_TYPE_LABELS[resource.type]}:
										<a href={resource.url} target="_blank">
											{getHostname(resource.url)}
										</a>
									</li>
								))}
							</ul>
						</dd>
					</div>
				)
			}
		</Flow>
	</Flow>

	<div>
		<Flow>
			<ScoreOverview telemetry={telemetry} />

			<h2>
				How to opt out <VisuallyHidden>of {name}</VisuallyHidden>
			</h2>
			{
				telemetry.optOutOptions.map((option) => {
					switch (option.type) {
						case 'COMMAND':
							return (
								<Flow>
									<p>Telemetry can be disabled per-project by running the following command:</p>
									{/* prettier-ignore */}
									<pre><code>{option.value}</code></pre>
								</Flow>
							);
						case 'ENVIRONMENT_VARIABLE':
							return (
								<Flow>
									<p>
										To disable telemetry for all projects, you can save these environment variables:
									</p>
									<Code>{option.value}</Code>
									<p>
										Make sure to add these to <em>all</em> environments that uses the tool, like
										your Continuous Integration build server.
									</p>
								</Flow>
							);
					}
				})
			}
		</Flow>
	</div>
</ContentLayout>
